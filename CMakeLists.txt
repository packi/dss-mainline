CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
PROJECT(DSS)

OPTION(WITH_TESTS "Include test-suite" ON)
OPTION(WITH_SIM "Compile and start the simulation" ON)
OPTION(WITH_GCOV "Compile coverage information into the dss" OFF)
OPTION(RELEASE_BUILD "Whether this release is a release build" OFF)

IF(NOT WITH_DATADIR)
  SET(WITH_DATADIR "${CMAKE_INSTALL_PREFIX}/share/dss/data" CACHE FILEPATH "Data directory")
ENDIF(NOT WITH_DATADIR)

SET(DSS_GEN_VERSION_CMD "")
IF(WIN32)
  SET(DSS_GEN_VERSION_CMD "tools/dss_gen_version_win32.bat")
ENDIF(WIN32)
IF(UNIX)
  SET(DSS_GEN_VERSION_CMD "tools/dss_gen_version_unix.sh")
ENDIF(UNIX)

ADD_CUSTOM_TARGET(build_info.h ALL
	COMMAND ${DSS_GEN_VERSION_CMD} ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
ADD_DEFINITIONS(-DHAVE_BUILD_INFO_H)

SET(REQUIRED_LIBS)

INCLUDE (${CMAKE_ROOT}/Modules/FindLibXml2.cmake)
IF (LIBXML2_FOUND)
  INCLUDE_DIRECTORIES (${LIBXML2_INCLUDE_DIR})
  SET(REQUIRED_LIBS ${REQUIRED_LIBS} ${LIBXML2_LIBRARIES})
ELSE (LIBXML2_FOUND)
  MESSAGE (FATAL_ERROR "Cannot build without LibXML2. Please install LibXML2.")
ENDIF (LIBXML2_FOUND)

ADD_DEFINITIONS(-DXP_UNIX -DUSE_LIBXML -DNO_CGI)
ADD_DEFINITIONS(-Wall -Werror)
INCLUDE_DIRECTORIES(external)
INCLUDE_DIRECTORIES(${DSS_SOURCE_DIR})

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  INCLUDE_DIRECTORIES(/opt/local/include)
  SET(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} /opt/local/include)
  LINK_DIRECTORIES(/opt/local/lib)
  SET(REQUIRED_LIBS ${REQUIRED_LIBS}  boost_filesystem-mt boost_system-mt boost_program_options-mt PocoFoundation PocoNet)
  SET(DNS_SD_LIB)
ELSE(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  SET(REQUIRED_LIBS ${REQUIRED_LIBS} boost_filesystem-mt boost_program_options-mt rt)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  INCLUDE(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-Wno-deprecated" HAVE_WNO_DEPRECATED)
  IF(HAVE_WNO_DEPRECATED)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated")
  ENDIF(HAVE_WNO_DEPRECATED)
  
  #CHECK_CXX_COMPILER_FLAG("-Wold-style-cast" HAVE_WOLD_STYLE_CAST)
  #IF(HAVE_WOLD_STYLE_CAST)
  #  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wold-style-cast")
  #ENDIF(HAVE_WOLD_STYLE_CAST)
  IF(WITH_GCOV)
    SET(REQUIRED_LIBS ${REQUIRED_LIBS} gcov)
  ENDIF(WITH_GCOV)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

SET(REQUIRED_LIBS ${REQUIRED_LIBS} PocoFoundation PocoNet)

# header tests
INCLUDE(CheckIncludeFiles)

CHECK_INCLUDE_FILES(dns_sd.h HAVE_DNS_SD)
CHECK_INCLUDE_FILES(avahi-client/publish.h HAVE_AVAHI)

IF(${HAVE_AVAHI} MATCHES 1) 
  SET(DNS_SD_LIB avahi-common avahi-client)
  SET(WITH_BONJOUR 1)
ENDIF(${HAVE_AVAHI} MATCHES 1)

IF(${HAVE_DNS_SD} MATCHES 1)
  SET(WITH_BONJOUR 1)
  IF(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(DNS_SD_LIB dns_sd)
  ENDIF(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
ENDIF(${HAVE_DNS_SD} MATCHES 1)

# check for SpiderMonkey API header
SET(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DXP_UNIX)
CHECK_INCLUDE_FILES(mozjs/jsapi.h HAVE_MOZJS_JSAPI_H)
CHECK_INCLUDE_FILES(js/jsapi.h HAVE_JS_JSAPI_H)
# check for SpiderMonkey Library
FIND_LIBRARY(MOZJS mozjs)
IF(${MOZJS} MATCHES "MOZJS-NOTFOUND")
  FIND_LIBRARY(MOZJS js)
ENDIF(${MOZJS} MATCHES "MOZJS-NOTFOUND")

# check for gsoap headers and library
CHECK_INCLUDE_FILES(stdsoap2.h HAVE_STDSOAP2_H)
IF(NOT HAVE_STDSOAP2_H)
  MESSAGE(FATAL_ERROR "gsoap library is required: stdsoap2.h header not found")
ENDIF(NOT HAVE_STDSOAP2_H)
FIND_LIBRARY(GSOAPPP "gsoap++")
IF(${GSOAPPP} MATCHES "GSOAPPP-NOTFOUND")
  MESSAGE(FATAL_ERROR "gsoap library is required: library gsoap++ not found")
ENDIF(${GSOAPPP} MATCHES "GSOAPPP-NOTFOUND")

# check for libical headers and library
CHECK_INCLUDE_FILES(libical/ical.h HAVE_LIBICAL_ICAL_H)
CHECK_INCLUDE_FILES(ical.h HAVE_ICAL_H)
IF(NOT HAVE_ICAL_H AND NOT HAVE_LIBICAL_ICAL_H)
  MESSAGE(FATAL_ERROR "libical library is required: ical.h not found")
ENDIF(NOT HAVE_ICAL_H AND NOT HAVE_LIBICAL_ICAL_H)
FIND_LIBRARY(LIBICAL ical)
IF(${LIBICAL} MATCHES "LIBICAL-NOTFOUND")
  MESSAGE(FATAL_ERROR "libical libical is required: library libical not found")
ENDIF(${LIBICAL} MATCHES "LIBICAL-NOTFOUND")

# generate config.h header file
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
               ${CMAKE_CURRENT_BINARY_DIR}/config.h)
ADD_DEFINITIONS(-DHAVE_CONFIG_H)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

ADD_SUBDIRECTORY(core)
ADD_SUBDIRECTORY(unix)
ADD_SUBDIRECTORY(webservices)
ADD_SUBDIRECTORY(external)
ADD_SUBDIRECTORY(doc)

LINK_DIRECTORIES(${DSS_BINARY_DIR}/core ${DSS_BINARY_DIR}/unix ${DSS_BINARY_DIR}/tests)


SET(REQUIRED_LIBS ${REQUIRED_LIBS} ${GSOAPPP} PocoXML ${MOZJS} ${DNS_SD_LIB}
	${BOOST_TEST_LIB} dl ${LIBICAL})

SET(BOOST_TEST_LIB)
SET(TEST_LIB)
IF(WITH_TESTS) 
  SET(BOOST_TEST_LIB boost_unit_test_framework-mt)
  SET(TEST_LIB tests)
  ADD_SUBDIRECTORY(tests)
ENDIF(WITH_TESTS)

ADD_EXECUTABLE(dss main.cpp namespaces.cpp)

INSTALL(TARGETS dss RUNTIME DESTINATION bin)
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/ DESTINATION ${WITH_DATADIR}
        PATTERN "/webroot/js/lib/extjs/docs" EXCLUDE
        PATTERN "/webroot/js/lib/extjs/examples" EXCLUDE
       )


TARGET_LINK_LIBRARIES(dss ${TEST_LIB} ${BOOST_TEST_LIB} core unix webservices pthread
	mongoose ${REQUIRED_LIBS})


ADD_CUSTOM_TARGET(debian
	COMMAND dpkg-buildpackage -rfakeroot
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)
